import { google } from "googleapis"; import { generateID } from "tezx/helper"; export function GoogleOauthClient(e) { const { clientId: t, clientSecret: r, redirectUri: o } = e; return new google.auth.OAuth2(t, r, o) } export function getGoogleOAuthURL({ scopes: e = ["openid", "email", "profile"], authClient: t, loginHint: r, prompt: o = "consent select_account", accessType: n = "offline", includeGrantedScopes: i = !0 }) { return (s, a) => { let c = `req-${generateID()}`; s.header("state", c); const l = t.generateAuthUrl({ access_type: n, scope: e, state: c, login_hint: r, prompt: o, include_granted_scopes: i }); return s.state.set("google", l), a ? a() : s.redirect(l) } } export function verifyGoogleToken({ authClient: e, onError: t, Callbacks: r, onSuccess: o }) { return async (n, i) => { try { const s = n.req.query; if (s?.error) { if (t) return t?.(s.error); throw new Error(s.error) } if (s.code) { const { tokens: a, res: c } = await e.getToken(s.code); e.setCredentials(a); const l = a?.id_token, g = await fetch(`https://oauth2.googleapis.com/tokeninfo?id_token=${l}`), u = await g.json(); if (u.aud !== e?._clientId) throw new Error("Invalid client ID"); if (r.signIn) { if (!await r.signIn(u)) { if (t) return t("Sign-in rejected"); throw new Error("Sign-in rejected") } } let d = a; if (r.jwt && (d = await r.jwt(a, u)), r.session) { const e = await r.session({ token: d }, u); n.session = e } return await (o?.(d, c)), await i() } if (t) return t?.("Missing authorization code"); throw new Error("Missing authorization code") } catch (e) { if (t) return t?.(e.message); throw new Error(e?.message) } } }